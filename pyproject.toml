[project]
name = "libseis"
version = "0.0.2"
description = "Library of C++/Python serismic processing utils"
readme = "README.md"
authors = [
    { name = "David Graham", email = "dpgraham4401@gmail.com" },
]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Private :: Do Not Upload",
]


[dependency-groups]
build = [
    "pybind11>=2.13.6",
]
dev = [
    "pre-commit>=4.2.0",
    "pytest>=8.4.0",
    "pytest-xdist>=3.7.0",
    "ruff>=0.11.13",
    { include-group = "build" },
]

[build-system]
requires = ["scikit-build-core>=0.10", "pybind11"]
build-backend = "scikit_build_core.build"


[tool.uv]
cache-keys = [
    { file = "pyproject.toml" },
    { git = { commit = true } },
    { file = "CMakeLists.txt" },
    { file = "src/**/*.cpp" },
    { file = "src/**/*.hpp" },
]

[tool.scikit-build]
wheel.expand-macos-universal-tags = true
minimum-version = "build-system.requires"
build-dir = "build/{wheel_tag}"


[tool.pytest.ini_options]
minversion = "8.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
log_cli_level = "INFO"
filterwarnings = [
    "error",
    "ignore::pytest.PytestCacheWarning",
]
testpaths = ["tests"]

[tool.cibuildwheel]
build-frontend = "build[uv]"
test-command = "pytest {project}/tests"
test-extras = ["test"]

[tool.cibuildwheel.pyodide]
build-frontend = { name = "build", args = ["--exports", "whole_archive"] }

[tool.ruff.lint]
extend-select = [
    "B", # flake8-bugbear
    "I", # isort
    "ARG", # flake8-unused-arguments
    "C4", # flake8-comprehensions
    "EM", # flake8-errmsg
    "ICN", # flake8-import-conventions
    "G", # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "EXE", # flake8-executable
    "NPY", # NumPy specific rules
    "PD", # pandas-vet
]
